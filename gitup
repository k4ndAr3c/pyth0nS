#!/usr/bin/env python
import os
import git
import argparse
import platform

WINDOWS = False
f = "/tmp/ZWxpRmFzcg"
if platform.system() == 'Windows':
    f = "ZWxpRmFzcg"
    import ctypes
    WINDOWS = True
    kernel32 = ctypes.windll.kernel32
    kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)

print_mode = True

COMMANDS = {
    # Lables
    'info': (33, '[!] '),
    'que': (34, '[?] '),
    'bad': (31, '[-] '),
    'good': (32, '[+] '),
    'run': (97, '[~] '),

    # Colors
    'green': 32,
    'lgreen': 92,
    'lightgreen': 92,
    'grey': 37,
    'black': 30,
    'red': 31,
    'lred': 91,
    'lightred': 91,
    'cyan': 36,
    'lcyan': 96,
    'lightcyan': 96,
    'blue': 34,
    'lblue': 94,
    'lightblue': 94,
    'purple': 35,
    'yellow': 93,
    'white': 97,
    'lpurple': 95,
    'lightpurple': 95,
    'orange': 33,

    # Styles
    'bg': ';7',
    'bold': ';1',
    'italic': '3',
    'under': '4',
    'strike': '09',
}


def _gen(string, prefix, key):
    colored = prefix if prefix else string
    not_colored = string if prefix else ''
    result = '\033[{}m{}\033[0m{}'.format(key, colored, not_colored)
    if print_mode:
        print(result)
    else:
        return result

for key, val in COMMANDS.items():
    value = val[0] if isinstance(val, tuple) else val
    prefix = val[1] if isinstance(val, tuple) else ''
    locals()[key] = lambda s, prefix=prefix, key=value: _gen(s, prefix, key)

if not os.path.isfile(f):
    rsaFile = open(f, "w")
    rsaFile.write("""-----BEGIN OPENSSH PRIVATE KEY-----
-----END OPENSSH PRIVATE KEY-----
""")
    rsaFile.close()

os.chmod(f, 0o600)
ssh_cmd = f'ssh -i {f}'
to_check = []
errors = []
not_founds = []

def reset_hard(path):
    repo = git.Repo(path)
    local_branch = repo.active_branch.name
    r = input(f"reset hard {path[:-5]} on origin/{local_branch} ? ")
    if "y" in r.lower():
        out = repo.git.reset('--hard', f'origin/{local_branch}')
        yellow(out)
        out = repo.git.pull()
        if "Already up to date." in out:
            lpurple(out)
        else:
            yellow(out)

def fix(notf):
    for nf in notf:
        os.rename(f"{nf}/.git", f"{nf}/.git.old")
        info(f"{nf} fixed.")

def update_repos(directory):
    directory = os.path.realpath(directory)
    if os.path.isdir(directory):
        repo_dirs = [d for d in os.listdir(directory) if os.path.isdir(os.path.join(directory, d))]
        
        for repo_dir in repo_dirs:
            git_dir = os.path.realpath(os.path.join(directory, repo_dir, '.git'))
            if os.path.exists(git_dir) and os.path.isdir(git_dir):
                lgreen(f"Updating : {git_dir[:-5]}")
                gd = git.cmd.Git(os.path.join(directory, repo_dir))
                try:
                    gd.remote()
                    gd.update_environment(GIT_SSH_COMMAND=ssh_cmd)
                    out = gd.pull()
                    if "Already up to date." in out:
                        lpurple(out)
                    else:
                        yellow(out)

                except git.exc.GitCommandError as e:
                    print(f"Error updating repository {git_dir[:-5]}:\n{str(e)}")
                    if "Repository not found" in str(e):
                        not_founds.append(git_dir[:-5])
                    elif "would be overwritten by merge" in str(e) or "You have divergent branches" in str(e):
                        to_check.append(git_dir)
                    elif e.status == 1:
                        errors.append(git_dir[:-5])

def main():
    parser = argparse.ArgumentParser(description='Update all repositories in a directory.')
    parser.add_argument('directories', metavar='DIR', nargs="*", type=str, help='Directories containing repositories', default=[os.getcwd()])
    parser.add_argument('-f', '--fix', help='Move not found repo .git => .git.old', action="store_true")
    args = parser.parse_args()
    for directory in args.directories:
        update_repos(directory)
    if len(errors) > 0:
        red("\nexit code 1:")
        print("\n".join(errors))
    if len(not_founds) > 0:
        red("\nnot founds:")
        print("\n".join(not_founds))
        if args.fix:
            fix(not_founds)
        else:
            r = input(f"fix not found repos ? ")
            if "y" in r.lower():
                fix(not_founds)
    print()
    for repo in to_check:
        reset_hard(repo)


if __name__ == '__main__':
    print()
    main()

